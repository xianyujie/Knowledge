#include <iostream>
#include <algorithm>
#include<vector>
#include<string>
using namespace std;

//顺序查找
int SequentialSearch(vector<int> v, int k) {
	for (int i = 0; i < v.size(); ++i)
		if (v[i] == k)
			return i;
	return -1;
}

// 二分查找非递归
int BinarySearch(vector<int> v, int value)
{
	if (v.size() <= 0)
		return -1;

	int low = 0;
	int high = v.size() - 1;
	while (low <= high)
	{
		int mid = low + (high - low) / 2;
		if (v[mid] == value)
			return mid;
		else if (v[mid] > value)
			high = mid - 1;
		else
			low = mid + 1;
	}

	return -1;
}

// 二分查找递归
int BinarySearch_recursive(vector<int> v, int value, int low, int high)
{
	if (low > high)
		return -1;
	int mid = low + (high - low) / 2;
	if (v[mid] == value)
		return mid;
	else if (v[mid] > value)
		return BinarySearch_recursive(v, value, low, mid - 1);
	else
		return BinarySearch_recursive(v, value, mid + 1, high);
}

//插值查找
int InsertionSearch(vector<int>v, int value, int low, int high)
{
	int mid = low + (value - v[low]) / (v[high] - v[low])*(high - low);
	if (v[mid] == value)
		return mid;
	if (v[mid]>value)
		return InsertionSearch(v, value, low, mid - 1);
	if (v[mid]<value)
		return InsertionSearch(v, value, mid + 1, high);
}

//斐波那契查找
const int max_size = 20;
void Fibonacci(int * F)
{
	F[0] = 0;
	F[1] = 1;
	for (int i = 2; i<max_size; ++i)
		F[i] = F[i - 1] + F[i - 2];
}
int FibonacciSearch(int *a, int n, int key)  //a为要查找的数组,n为要查找的数组长度,key为要查找的关键字
{
	int low = 0;
	int high = n - 1;

	int F[max_size];
	Fibonacci(F);//构造一个斐波那契数组F 

	int k = 0;
	while (n>F[k] - 1)//计算n位于斐波那契数列的位置
		++k;

	int  * temp;//将数组a扩展到F[k]-1的长度
	temp = new int[F[k] - 1];
	memcpy(temp, a, n*sizeof(int));

	for (int i = n; i<F[k] - 1; ++i)
		temp[i] = a[n - 1];

	while (low <= high)
	{
		int mid = low + F[k - 1] - 1;
		if (key<temp[mid])
		{
			high = mid - 1;
			k -= 1;
		}
		else if (key>temp[mid])
		{
			low = mid + 1;
			k -= 2;
		}
		else
		{
			if (mid<n)
				return mid; //若相等则说明mid即为查找到的位置
			else
				return n - 1; //若mid>=n则说明是扩展的数值,返回n-1
		}
	}
	delete[] temp;
	return -1;
}

//二叉搜索树查找
struct BiTree{
	int key;
	BiTree* lchild = NULL;
	BiTree* rchild = NULL;
	explicit BiTree(int i = 0) :key(i), lchild(NULL), rchild(NULL){}
};
bool SearchBST(BiTree *T, int key, BiTree *f, BiTree *p){
	if (!T) { //查找不成功
		p = f;
		return false;
	}
	else if (key == T->key) { //查找成功
		p = T;
		return true;
	}
	else if (key < T->key) //在左子树中继续查找
		return SearchBST(T->lchild, key, T, p);
	else //在右子树中继续查找
		return SearchBST(T->rchild, key, T, p);
}
