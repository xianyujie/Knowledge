### 前缀树
class TrieNode:
    def __init__(self):
        self.links = {}
        self.isEnd = False

    def containKeys(self, ch):
        if ch in self.links:
            return True
        return False

    def getNode(self, ch):
        return self.links[ch]

    def setNode(self, ch, node):
        self.links[ch] = node

    def setEnd(self):
        self.isEnd = True
class Trie(TrieNode):
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        node = self.root
        for i in range(len(word)):
            if not node.containKeys(word[i]):
                node.setNode(word[i], TrieNode())
            node = node.getNode(word[i])
        node.setEnd()

    def searchPrefix(self, word):
        node = self.root
        for i in range(len(word)):
            if not node.containKeys(word[i]):
                return None
            node = node.getNode(word[i])
        return node

    def search(self, word: str) -> bool:
        node = self.searchPrefix(word)
        if node is not None and node.isEnd:
            return True
        return False

    def startsWith(self, prefix: str) -> bool:
        node = self.searchPrefix(prefix)
        if node is not None:
            return True
        return False

### 深度优先遍历找环
visited = [0 for i in range(numCourses)]
def dfs(m):
    if visited[m]==1:
        return False
    if visited[m]==2:
        return True
    visited[m]=2
    for k in dp[m]:
        if dfs(k):
            return True
    visited[m]=1
    return False

###厄拉多塞筛法（求质数数量）
#具体操作：先将 2~n 的各个数放入表中，
# 然后在2的上面画一个圆圈，然后划去2的其他倍数；
# 第一个既未画圈又没有被划去的数是3，将它画圈，再划去3的其他倍数；
# 现在既未画圈又没有被划去的第一个数 是5，将它画圈，并划去5的其他倍数……
# 依次类推，一直到所有小于或等于 n 的各数都画了圈或划去为止。这时，表中画了圈的以及未划去的那些数正好就是小于 n 的素数。
def countPrimes(self, n: int) -> int:
    if n < 3:
        return 0
    dp = [0 for i in range(n)]
    res = 0
    m = 2
    while (m < n):
        if (dp[m] == 0):
            res += 1
            cnt = 2
            while (cnt * m < n):
                dp[cnt * m] = 1
                cnt += 1

        m += 1
    return res

### 给定范围 [m, n]，其中 0 <= m <= n <= 2147483647，
# 返回此范围内所有数字的按位与（包含 m, n 两端点）
def rangeBitwiseAnd(self, m: int, n: int) -> int:
    while (n > m):
        n = n & (n - 1)
    return n

### 买卖股票的最佳时机
# base case：
# dp[-1][k][0] = dp[i][0][0] = 0
# dp[-1][k][1] = dp[i][0][1] = -infinity
# 状态转移方程：
# dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
# dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])

# ① k == 1
# dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])
# dp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i])
#             = max(dp[i-1][1][1], -prices[i])
# 解释：k = 0 的 base case，所以 dp[i-1][0][0] = 0。
# 现在发现 k 都是 1，不会改变，即 k 对状态转移已经没有影响了。
# 可以进行进一步化简去掉所有 k：
# dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
# dp[i][1] = max(dp[i-1][1], -prices[i])
def maxProfit_1(prices):
    dp_i_0 = 0
    dp_i_1 = -pow(2,32)
    for i in range(len(prices)):
        dp_i_0 = max(dp_i_0,dp_i_1+prices[i])
        dp_i_1 = max(dp_i_1,-prices[i])
    return dp_i_0
# ② k=+infinity
# dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
# dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
#             = max(dp[i-1][k][1], dp[i-1][k][0] - prices[i])
# 我们发现数组中的 k 已经不会改变了，也就是说不需要记录 k 这个状态了：
# dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
# dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
def maxProfit_infinity(prices):
    dp_i_0 = 0
    dp_i_1 = -prices[0]
    for i in range(len(prices)):
        temp = dp_i_0
        dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])
        dp_i_1 = max(dp_i_1, temp - prices[i])
    return dp_i_0
# ③k=+infinity with cooldown 每次 sell 之后要等一天才能继续交易。
# dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
# dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])
# 解释：第 i 天选择 buy 的时候，要从 i-2 的状态转移，而不是 i-1 。
def maxProfit_infinity_cooldown(prices):
    dp_i_0 = 0
    dp_i_1 = -pow(2,32)
    dp_pre_0 = 0  #代表 dp[i-2][0]
    for i in range(len(prices)):
        temp = dp_i_0
        dp_i_0 = max(dp_i_0,dp_i_1+prices[i])
        dp_i_1 = max(dp_i_1,dp_pre_0-prices[i])
        dp_pre_0 = temp
    return dp_i_0

# ④ k=+infinity with fee 每次交易要支付手续费，只要把手续费从利润中减去即可。
# dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
# dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i] - fee)
# 解释：相当于买入股票的价格升高了。
# 在第一个式子里减也是一样的，相当于卖出股票的价格减小了。
def maxProfit_infinity_fee(prices,fee):
    dp_i_0 = 0
    dp_i_1 = -pow(2,32)
    for i in range(len(prices)):
        temp = dp_i_0
        dp_i_0 = max(dp_i_0,dp_i_1+prices[i])
        dp_i_1 = max(dp_i_1,temp-prices[i]-fee)
    return dp_i_0
# ④ k=2
def maxProfit_2(prices):
    if(len(prices)==0):
        return 0
    dp = [[[0 for i in range(2)] for j in range(3)] for k in range(len(prices))]
    for i in range(1,3):
        for j in range(len(prices)):
            if(j==0):
                dp[0][i][1] = -prices[0]
            else:
                dp[j][i][0] = max(dp[j-1][i][0],dp[j-1][i][1]+prices[j])
                dp[j][i][1] = max(dp[j-1][i][1],dp[j-1][i-1][0]-prices[j])
    return dp[-1][-1][0]
# ⑤ k = any integer
# 有了上一题 k = 2 的铺垫，这题应该和上一题的第一个解法没啥区别。
# 但是出现了一个超内存的错误，原来是传入的 k 值会非常大，dp 数组太大了。
# 现在想想，交易次数 k 最多有多大呢？
# 一次交易由买入和卖出构成，至少需要两天。所以说有效的限制 k 应该不超过 n/2，
# 如果超过，就没有约束作用了，相当于 k = +infinity。这种情况是之前解决过的。
def maxProfit_K(prices,max_k):
    def maxProfit_infinity(prices):
        dp_i_0 = 0
        dp_i_1 = -pow(2, 32)
        for i in range(len(prices)):
            temp = dp_i_0
            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])
            dp_i_1 = max(dp_i_1, temp - prices[i])
        return dp_i_0
    if (max_k > len(prices) // 2):
        return maxProfit_infinity(prices)

    dp = [[[0 for j in range(2)] for k in range(max_k + 1)] for i in range(len(prices))]
    for k in range(1, max_k + 1):
        for i in range(len(prices)):
            if (i == 0):
                dp[0][k][1] = -prices[0]
            else:
                dp[i][k][0] = max(dp[i - 1][k][0], dp[i - 1][k][1] + prices[i])
                dp[i][k][1] = max(dp[i - 1][k][1], dp[i - 1][k - 1][0] - prices[i])
    return dp[-1][-1][0]

### LRU (最近最少使用) 缓存机制
class LNode():
    def __init__(self):
        self.val = 0
        self.key = 0
        self.prev = None
        self.next = None
class LRUCache():
    def _add_node(self, node):
        node.prev = self.head
        node.next = self.head.next
        self.head.next.prev = node
        self.head.next = node

    def _remove_node(self, node):
        prev = node.prev
        prev.next = node.next
        node.next.prev = prev

    def _move_to_head(self, node):
        self._remove_node(node)
        self._add_node(node)

    def _pop_tail(self):
        res = self.tail.prev
        self._remove_node(res)
        return res

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.size = 0
        self.catch = {}
        self.head = LNode()
        self.tail = LNode()
        self.head.next = self.tail
        self.tail.prev = self.head

    def get(self, key: int) -> int:
        node = self.catch.get(key, None)
        if node is None:
            return -1
        self._move_to_head(node)
        return node.val

    def put(self, key: int, value: int) -> None:
        node = self.catch.get(key, None)
        if node is None:
            node = LNode()
            node.key = key
            node.val = value
            self.catch[key] = node
            self._add_node(node)
            self.size += 1
            if (self.size > self.capacity):
                tail = self._pop_tail()
                del self.catch[tail.key]
                self.size -= 1
        else:
            self._move_to_head(node)
            node.val = value

### 单词拆分
# 给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，
# 在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。
# 返回所有这些可能的句子。
def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:
    dp = [[] for i in range(len(s) + 1)]
    initial = ['']
    dp[0] = initial
    for i in range(1, len(s) + 1):
        li = []
        for j in range(0, i):
            if (len(dp[j]) > 0 and s[j:i] in wordDict):
                for d in dp[j]:
                    if (d == ''):
                        li.append(s[j:i])
                    else:
                        li.append(d + ' ' + s[j:i])
        dp[i] = li
    return dp[-1]


